// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: call_audit/language_profiles.proto

package call_audit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LanguageProfileService_Get_FullMethodName    = "/call_audit.LanguageProfileService/Get"
	LanguageProfileService_List_FullMethodName   = "/call_audit.LanguageProfileService/List"
	LanguageProfileService_Create_FullMethodName = "/call_audit.LanguageProfileService/Create"
	LanguageProfileService_Update_FullMethodName = "/call_audit.LanguageProfileService/Update"
	LanguageProfileService_Delete_FullMethodName = "/call_audit.LanguageProfileService/Delete"
)

// LanguageProfileServiceClient is the client API for LanguageProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguageProfileServiceClient interface {
	Get(ctx context.Context, in *GetLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error)
	List(ctx context.Context, in *ListLanguageProfilesRequest, opts ...grpc.CallOption) (*ListLanguageProfilesResponse, error)
	Create(ctx context.Context, in *CreateLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error)
	Update(ctx context.Context, in *UpdateLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error)
	Delete(ctx context.Context, in *DeleteLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error)
}

type languageProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageProfileServiceClient(cc grpc.ClientConnInterface) LanguageProfileServiceClient {
	return &languageProfileServiceClient{cc}
}

func (c *languageProfileServiceClient) Get(ctx context.Context, in *GetLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageProfile)
	err := c.cc.Invoke(ctx, LanguageProfileService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) List(ctx context.Context, in *ListLanguageProfilesRequest, opts ...grpc.CallOption) (*ListLanguageProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLanguageProfilesResponse)
	err := c.cc.Invoke(ctx, LanguageProfileService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) Create(ctx context.Context, in *CreateLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageProfile)
	err := c.cc.Invoke(ctx, LanguageProfileService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) Update(ctx context.Context, in *UpdateLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageProfile)
	err := c.cc.Invoke(ctx, LanguageProfileService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) Delete(ctx context.Context, in *DeleteLanguageProfileRequest, opts ...grpc.CallOption) (*LanguageProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageProfile)
	err := c.cc.Invoke(ctx, LanguageProfileService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageProfileServiceServer is the server API for LanguageProfileService service.
// All implementations must embed UnimplementedLanguageProfileServiceServer
// for forward compatibility.
type LanguageProfileServiceServer interface {
	Get(context.Context, *GetLanguageProfileRequest) (*LanguageProfile, error)
	List(context.Context, *ListLanguageProfilesRequest) (*ListLanguageProfilesResponse, error)
	Create(context.Context, *CreateLanguageProfileRequest) (*LanguageProfile, error)
	Update(context.Context, *UpdateLanguageProfileRequest) (*LanguageProfile, error)
	Delete(context.Context, *DeleteLanguageProfileRequest) (*LanguageProfile, error)
	mustEmbedUnimplementedLanguageProfileServiceServer()
}

// UnimplementedLanguageProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLanguageProfileServiceServer struct{}

func (UnimplementedLanguageProfileServiceServer) Get(context.Context, *GetLanguageProfileRequest) (*LanguageProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLanguageProfileServiceServer) List(context.Context, *ListLanguageProfilesRequest) (*ListLanguageProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLanguageProfileServiceServer) Create(context.Context, *CreateLanguageProfileRequest) (*LanguageProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLanguageProfileServiceServer) Update(context.Context, *UpdateLanguageProfileRequest) (*LanguageProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLanguageProfileServiceServer) Delete(context.Context, *DeleteLanguageProfileRequest) (*LanguageProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLanguageProfileServiceServer) mustEmbedUnimplementedLanguageProfileServiceServer() {
}
func (UnimplementedLanguageProfileServiceServer) testEmbeddedByValue() {}

// UnsafeLanguageProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageProfileServiceServer will
// result in compilation errors.
type UnsafeLanguageProfileServiceServer interface {
	mustEmbedUnimplementedLanguageProfileServiceServer()
}

func RegisterLanguageProfileServiceServer(s grpc.ServiceRegistrar, srv LanguageProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedLanguageProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LanguageProfileService_ServiceDesc, srv)
}

func _LanguageProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).Get(ctx, req.(*GetLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLanguageProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).List(ctx, req.(*ListLanguageProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).Create(ctx, req.(*CreateLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).Update(ctx, req.(*UpdateLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).Delete(ctx, req.(*DeleteLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageProfileService_ServiceDesc is the grpc.ServiceDesc for LanguageProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "call_audit.LanguageProfileService",
	HandlerType: (*LanguageProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LanguageProfileService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LanguageProfileService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LanguageProfileService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LanguageProfileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LanguageProfileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "call_audit/language_profiles.proto",
}
